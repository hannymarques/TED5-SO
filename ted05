import java.util.Random;

class ThreadSum extends Thread {
    private int[] array;
    private int startIndex;
    private int endIndex;
    private int threadId;
    
    public ThreadSum(int[] array, int startIndex, int endIndex, int threadId) {
        this.array = array;
        this.startIndex = startIndex;
        this.endIndex = endIndex;
        this.threadId = threadId;
    }

    @Override
    public void run() {
      
        int sum = 0;
        System.out.println("Thread ID " + threadId + " vai somar os elementos de " + startIndex + " a " + (endIndex - 1));
        
        for (int i = startIndex; i < endIndex; i++) {
            sum += array[i];
           
            System.out.println("Thread ID " + threadId + " somando: " + array[i]);
        }
        
        System.out.println("Thread ID " + threadId + " soma total: " + sum);
    }
}

public class ThreadSumExample {

    public static void main(String[] args) {
        final int NUM_ELEMENTS = 20;  
        final int NUM_THREADS = 4;   

        
        int[] array = new int[NUM_ELEMENTS];
        Random random = new Random();
        
        for (int i = 0; i < NUM_ELEMENTS; i++) {
            array[i] = random.nextInt(10) + 1; 
        }

        System.out.println("Vetor de entrada:");
        for (int i = 0; i < NUM_ELEMENTS; i++) {
            System.out.print(array[i] + " ");
        }
        System.out.println("\n");

       
        int chunkSize = NUM_ELEMENTS / NUM_THREADS;

        Thread[] threads = new Thread[NUM_THREADS];

        for (int i = 0; i < NUM_THREADS; i++) {
            int startIndex = i * chunkSize;
            int endIndex = (i + 1) * chunkSize;
            
            threads[i] = new ThreadSum(array, startIndex, endIndex, i);
            threads[i].start();
        }

        try {
            for (int i = 0; i < NUM_THREADS; i++) {
                threads[i].join();
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Todas as threads completaram sua execução.");
    }
}
